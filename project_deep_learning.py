# -*- coding: utf-8 -*-
"""Project Deep Learning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2EAqzIRRamKJbEGw99OuBjA52qbwaSP

# **Lab 1: Persiapan Lingkungan dan Dataset**
"""

# Lab 1: Persiapan Lingkungan dan Dataset
# from google.colab import drive
# drive.mount('/content/drive')

# Import libraries yang diperlukan
import cv2
import numpy as np
from tensorflow.keras.preprocessing.image import load_img, img_to_array
import os

# Mengubah path dataset ke folder lokal
dataset_path = './dataset_wajah/'  # Folder dataset_wajah di direktori yang sama dengan script
faces = []
labels = []

for label in os.listdir(dataset_path):
    person_path = os.path.join(dataset_path, label)
    if os.path.isdir(person_path):
        for img_name in os.listdir(person_path):
            img_path = os.path.join(person_path, img_name)
            if img_name.lower().endswith(('.png', '.jpg', '.jpeg')):
                img = load_img(img_path, color_mode='grayscale', target_size=(64, 64))
                img_array = img_to_array(img)
                faces.append(img_array)
                labels.append(label)

faces = np.array(faces)
labels = np.array(labels)
print("Data loaded successfully!")

"""# **Lab 2: Preprocessing Data**"""

# Lab 2: Preprocessing Data
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical

# Normalisasi data
faces = faces / 255.0  # Skala 0-1

# One-hot encode labels jika diperlukan
unique_labels = list(set(labels))
label_map = {label: idx for idx, label in enumerate(unique_labels)}
labels = np.array([label_map[label] for label in labels])
labels = to_categorical(labels, num_classes=len(unique_labels))

# Split data
x_train, x_test, y_train, y_test = train_test_split(faces, labels, test_size=0.2, random_state=42)
print("Data preprocessing completed!")

"""# **Lab 3: Model DNN**"""

# Lab 3: Model DNN
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Flatten

# Definisi model DNN
dnn_model = Sequential([
    Flatten(input_shape=(64, 64, 1)),
    Dense(128, activation='relu'),
    Dense(64, activation='relu'),
    Dense(len(unique_labels), activation='softmax')
])

# Kompilasi model
dnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Training model
dnn_model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))
print("DNN model training completed!")

"""# **Lab 4: Model CNN**"""

# Lab 4: Model CNN
from tensorflow.keras.layers import Conv2D, MaxPooling2D

# Definisi model CNN
cnn_model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 1)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(len(unique_labels), activation='softmax')
])

# Kompilasi model
cnn_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Training model
cnn_model.fit(x_train, y_train, epochs=10, validation_data=(x_test, y_test))
print("CNN model training completed!")

"""# **Lab 5: Implementasi Absensi Wajah**"""

# Lab 5: Implementasi Absensi Wajah
def recognize_face(frame, model):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    face = cv2.resize(gray, (64, 64)).reshape(1, 64, 64, 1) / 255.0
    pred = np.argmax(model.predict(face), axis=1)
    return unique_labels[pred[0]]

# Contoh menggunakan webcam untuk mendeteksi wajah
cap = cv2.VideoCapture(0)
while True:
    ret, frame = cap.read()
    if not ret:
        break
    label = recognize_face(frame, cnn_model)  # Ubah cnn_model ke dnn_model untuk model DNN
    cv2.putText(frame, f'Name: {label}', (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow("Face Recognition", frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break
cap.release()
cv2.destroyAllWindows()
print("Face recognition session ended.")

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from datetime import datetime
import pytz

# Fungsi untuk memprediksi wajah pada gambar
def predict_face(image_path, model, label_map):
    # Baca dan preprocess gambar
    img = load_img(image_path, color_mode='grayscale', target_size=(64, 64))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediksi
    prediction = model.predict(img_array)
    predicted_label_index = np.argmax(prediction, axis=1)[0]
    predicted_label = label_map[predicted_label_index]

    return predicted_label

# Path ke gambar yang ingin diuji
test_image_path = './dataset_wajah/teman1/Jonathan.jpeg'
label_map = {0: "Jonathan", 1: "Yessa", 2: "Teman3"}  # Sesuaikan dengan label dataset Anda

# Memuat model yang telah dilatih
cnn_model = tf.keras.models.load_model('/content/drive/MyDrive/dataset_wajah/MyModels/model_cnn.h5')

# Prediksi nama pada gambar
predicted_name = predict_face(test_image_path, cnn_model, label_map)

# Ambil waktu saat ini dalam format WIB
wib_tz = pytz.timezone('Asia/Jakarta')
current_time_wib = datetime.now(wib_tz).strftime('%Y-%m-%d %H:%M:%S')

# Tampilkan gambar dengan label dan waktu
img = cv2.imread(test_image_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

display_text = f"Nama: {predicted_name}\nWaktu: {current_time_wib}"

plt.imshow(img_rgb)
plt.title(display_text)
plt.axis('off')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from datetime import datetime
import pytz
import pandas as pd

# Fungsi untuk memprediksi wajah pada gambar
def predict_face(image_path, model, label_map):
    # Baca dan preprocess gambar
    img = load_img(image_path, color_mode='grayscale', target_size=(64, 64))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediksi
    prediction = model.predict(img_array)
    predicted_label_index = np.argmax(prediction, axis=1)[0]
    predicted_label = label_map[predicted_label_index]

    return predicted_label

# Path ke gambar yang ingin diuji
test_image_path = './dataset_wajah/teman1/Jonathan.jpeg'
label_map = {0: "Jonathan", 1: "Yessa", 2: "Teman3"}  # Sesuaikan dengan label dataset Anda

# Memuat model yang telah dilatih
cnn_model = tf.keras.models.load_model('/content/drive/MyDrive/dataset_wajah/MyModels/model_cnn.h5')

# Prediksi nama pada gambar
predicted_name = predict_face(test_image_path, cnn_model, label_map)

# Ambil waktu saat ini dalam format WIB
wib_tz = pytz.timezone('Asia/Jakarta')
current_time_wib = datetime.now(wib_tz).strftime('%Y-%m-%d %H:%M:%S')

# Tampilkan gambar dengan label dan waktu
img = cv2.imread(test_image_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

display_text = f"Nama: {predicted_name}\nWaktu: {current_time_wib}"

plt.imshow(img_rgb)
plt.title(display_text)
plt.axis('off')
plt.show()

# Nama file CSV
filename = 'data_kehadiran.csv'

# Tambahkan data kehadiran ke file CSV
data_baru = {
    'Nama Mahasiswa': predicted_name,
    'Tanggal Kehadiran': current_time_wib.split()[0],
    'Waktu Kehadiran': current_time_wib.split()[1],
    'Status Kehadiran': 'Hadir'
}

try:
    # Jika file sudah ada, tambahkan data baru
    df = pd.read_csv(filename)
    df = df.append(data_baru, ignore_index=True)
except FileNotFoundError:
    # Jika file belum ada, buat DataFrame baru dengan data baru
    df = pd.DataFrame([data_baru])

# Simpan DataFrame ke file CSV
df.to_csv(filename, index=False)
print(f"Data kehadiran untuk {predicted_name} telah disimpan ke '{filename}'.")

# Tampilkan data kehadiran terbaru
print("\nData Kehadiran Terbaru:")
print(df)

"""# **DNN & CNN**"""

import cv2
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from datetime import datetime
import pytz
import pandas as pd

# Fungsi untuk memprediksi wajah dengan model CNN atau DNN
def predict_face(image_path, model, label_map):
    # Baca dan preprocess gambar
    img = load_img(image_path, color_mode='grayscale', target_size=(64, 64))
    img_array = img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    # Prediksi
    prediction = model.predict(img_array)
    predicted_label_index = np.argmax(prediction, axis=1)[0]
    predicted_label = label_map[predicted_label_index]

    return predicted_label

# Path ke gambar yang ingin diuji
test_image_path = './dataset_wajah/teman1/Jonathan.jpeg'
label_map = {0: "Jonathan", 1: "Yessa", 2: "Teman3"}  # Sesuaikan dengan label dataset Anda

# Memuat model yang telah dilatih
model_to_use = cnn_model  # Atau bisa memilih dnn_model sesuai kebutuhan

# Prediksi nama pada gambar
predicted_name = predict_face(test_image_path, model_to_use, label_map)

# Ambil waktu saat ini dalam format WIB
wib_tz = pytz.timezone('Asia/Jakarta')
current_time_wib = datetime.now(wib_tz).strftime('%Y-%m-%d %H:%M:%S')

# Tampilkan gambar dengan label dan waktu
img = cv2.imread(test_image_path)
img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

display_text = f"Nama: {predicted_name}\nWaktu: {current_time_wib}"

plt.imshow(img_rgb)
plt.title(display_text)
plt.axis('off')
plt.show()

# Penyimpanan data kehadiran ke CSV
attendance_data = {
    'Nama Mahasiswa': [predicted_name],
    'Tanggal Kehadiran': [current_time_wib.split()[0]],
    'Waktu Kehadiran': [current_time_wib],
    'Status Kehadiran': ['Hadir']
}

attendance_df = pd.DataFrame(attendance_data)

# Cek apakah file CSV sudah ada
csv_file_path = './attendance.csv'  # File CSV di direktori yang sama
try:
    existing_df = pd.read_csv(csv_file_path)
    updated_df = pd.concat([existing_df, attendance_df], ignore_index=True)
except FileNotFoundError:
    updated_df = attendance_df

# Simpan atau update CSV
updated_df.to_csv(csv_file_path, index=False)

# Tampilkan data terbaru
print(updated_df.tail())